name: Build Yocto

on:
  push:
    paths-ignore:
      - '*.md'
      - 'assets/**'

env:
  CACHE_DIR: /home/runner/work/
  KAS_REPO_REF_DIR: /srv/gh-runners/quic-yocto/kas-mirrors
  BASE_ARTIFACT_URL: "https://quic-yocto-fileserver-1029608027416.us-central1.run.app/${{ github.run_id }}"

jobs:
  kas-lock:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run kas lock
        run: |
          sudo pip3 install kas
          kas dump --update --lock --inplace ci/base.yml

      - uses: actions/upload-artifact@v4
        with:
          name: kas-lock
          path: ci/*.lock.yml

  yocto-check-layer:
    needs: kas-lock
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v4
        with:
          name: kas-lock
          path: ci/

      - name: Run yocto-check-layer
        run: |
          ci/yocto-check-layer.sh

  yocto-patchreview:
    needs: kas-lock
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v4
        with:
          name: kas-lock
          path: ci/

      - name: Run Yocto patchreview
        run: |
          ci/yocto-patchreview.sh

  compile:
    needs: kas-lock
    strategy:
      fail-fast: true
      matrix:
        machine:
          - qcom-armv8a
    runs-on: ubuntu-latest
    name: ${{ matrix.machine }}/poky/systemd
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v4
        with:
          name: kas-lock
          path: ci/

      - name: Kas build
        run: |
          export DL_DIR=${CACHE_DIR}/downloads
          export SSTATE_DIR=${CACHE_DIR}/sstate-cache
          export KAS_WORK_DIR=$PWD/../kas
          mkdir $KAS_WORK_DIR
          kas build ci/mirror.yml:ci/${{ matrix.machine }}.yml

      - name: Publish image
        run: |
          build_dir=${CACHE_DIR}/builds/${GITHUB_RUN_ID}
          mkdir -p $build_dir
          img_dir=$build_dir/${{ matrix.machine }}
          [ -d $img_dir ] && rm -rf $img_dir
          deploy_dir=../kas/build/tmp/deploy/images/${{matrix.machine}}
          find $deploy_dir/ -maxdepth 1 -name "*.rootfs*.qcomflash" -exec rm -rf {} \;
          mv $deploy_dir $img_dir

          # Instruct our file server to make these files available for download
          url="${BASE_ARTIFACT_URL}/${{ matrix.machine }}/"

          retries=8
          okay=0
          shopt -s lastpipe  # allows us to capture the value of `okay` in the while loop below
          for ((i=0; i<retries; i++)); do
              curl -X POST -H "Accept: text/event-stream" -i --fail-with-body -s -N ${url} | \
                  while read line; do
                      echo $line
                      if [[ $line == STATUS=* ]]; then
                          if [[ $line == "STATUS=OK" ]]; then
                              okay=1
                              break
                          fi
                      fi
                  done
              [ $okay -eq 1 ] && break
              echo # new line break in case response doesn't have one
              echo "Error: unable to publish artifacts, sleep and retry"
              sleep 2
          done
          (( retries == i )) && { echo 'Failed to publish artifacts'; exit 1; }

          echo # new line break in case response doesn't have one
          echo Image available at: ${url}

  create-output:
    needs: compile
    outputs:
      url: ${{ steps.print-output.outputs.url }}
    runs-on: ubuntu-latest
    steps:
      - name: "Print output"
        id: print-output
        run: |
          echo "Downloads URL: ${BASE_ARTIFACT_URL}"
          echo "url=\"${BASE_ARTIFACT_URL}\"" >> $GITHUB_OUTPUT
          echo "${BASE_ARTIFACT_URL}" > build_url
      - name: Upload build URL
        uses: actions/upload-artifact@v4
        with:
          name: build_url
          path: build_url
